#include <iostream>
using namespace std;

class Node {
public:
    int data;
    int priority;
    Node* next;
    Node(int d, int p) : data(d), priority(p), next(nullptr) {}
};

class PriorityQueue {
    Node* front;

public:
    PriorityQueue() : front(nullptr) {}

    void enqueue(int value, int priority) {
        Node* newNode = new Node(value, priority);
        if (!front || priority < front->priority) {
            newNode->next = front;
            front = newNode;
        } else {
            Node* temp = front;
            while (temp->next && temp->next->priority <= priority) {
                temp = temp->next;
            }
            newNode->next = temp->next;
            temp->next = newNode;
        }
        cout << "Enqueued: " << value << " with priority " << priority << endl;
    }

    void dequeue() {
        if (!front) {
            cout << "Priority Queue is empty." << endl;
            return;
        }
        Node* temp = front;
        cout << "Dequeued: " << front->data << " with priority " << front->priority << endl;
        front = front->next;
        delete temp;
    }

    void display() {
        if (!front) {
            cout << "Priority Queue is empty." << endl;
            return;
        }
        Node* temp = front;
        cout << "Priority Queue elements: ";
        while (temp) {
            cout << temp->data << "(" << temp->priority << ") ";
            temp = temp->next;
        }
        cout << endl;
    }
};
