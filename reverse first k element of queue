#include <iostream>
using namespace std;

class Stack {
    int top;
    int* arr;
    int maxSize;

public:
    Stack(int size) {
        maxSize = size;
        arr = new int[maxSize];
        top = -1;
    }

    bool isEmpty() {
        return top == -1;
    }

    bool isFull() {
        return top == maxSize - 1;
    }

    void push(int value) {
        if (isFull()) {
            cout << "Stack is full" << endl;
            return;
        }
        arr[++top] = value;
    }

    int pop() {
        if (isEmpty()) {
            cout << "Stack is empty" << endl;
            return -1;
        }
        return arr[top--];
    }

    ~Stack() {
        delete[] arr;
    }
};

class Queue {
    int front, rear, size;
    int* arr;

public:
    Queue(int maxSize) {
        front = 0;
        rear = 0;
        size = maxSize + 1;  // One extra space to differentiate full vs empty
        arr = new int[size];
    }

    bool isEmpty() {
        return front == rear;
    }

    bool isFull() {
        return (rear + 1) % size == front;
    }

    void enqueue(int value) {
        if (isFull()) {
            cout << "Queue is full" << endl;
            return;
        }
        arr[rear] = value;
        rear = (rear + 1) % size;
    }

    int dequeue() {
        if (isEmpty()) {
            cout << "Queue is empty" << endl;
            return -1;
        }
        int value = arr[front];
        front = (front + 1) % size;
        return value;
    }

    int getFront() {
        return arr[front];
    }

    void display() {
        if (isEmpty()) {
            cout << "Queue is empty" << endl;
            return;
        }
        int i = front;
        cout << "Queue elements: ";
        while (i != rear) {
            cout << arr[i] << " ";
            i = (i + 1) % size;
        }
        cout << endl;
    }

    void reverseFirstKElements(int k) {
        if (k > size - 1 || k <= 0) {
            cout << "Invalid value of k" << endl;
            return;
        }

        Stack s(k);

        // Step 1: Dequeue the first k elements and push them onto the stack
        for (int i = 0; i < k; ++i) {
            if (!isEmpty()) {
                s.push(dequeue());
            }
        }

        // Step 2: Pop elements from stack and enqueue back to the queue
        while (!s.isEmpty()) {
            enqueue(s.pop());
        }

        // Step 3: Move the remaining elements to the back to maintain original order
        int remaining = (rear - front + size) % size - k;
        for (int i = 0; i < remaining; ++i) {
            enqueue(dequeue());
        }
    }

    ~Queue() {
        delete[] arr;
    }
};

int main() {
    Queue q(10);
    q.enqueue(10);
    q.enqueue(20);
    q.enqueue(30);
    q.enqueue(40);
    q.enqueue(50);

    int k = 3;
    q.reverseFirstKElements(k);

    cout << "Queue after reversing first " << k << " elements: ";
    q.display();

    return 0;
}
