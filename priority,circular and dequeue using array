#include <iostream>
using namespace std;

class PriorityQueue {
    int* arr;
    int maxSize;
    int size;

public:
    PriorityQueue(int capacity) : maxSize(capacity), size(0) {
        arr = new int[maxSize];
    }

    void enqueue(int value) {
        if (size == maxSize) {
            cout << "Priority Queue is full." << endl;
            return;
        }
        int i = size - 1;
        while (i >= 0 && arr[i] > value) {
            arr[i + 1] = arr[i];
            i--;
        }
        arr[i + 1] = value;
        size++;
        cout << "Enqueued: " << value << endl;
    }

    void dequeue() {
        if (size == 0) {
            cout << "Priority Queue is empty." << endl;
            return;
        }
        cout << "Dequeued: " << arr[0] << endl;
        for (int i = 0; i < size - 1; i++) {
            arr[i] = arr[i + 1];
        }
        size--;
    }

    void display() {
        if (size == 0) {
            cout << "Priority Queue is empty." << endl;
            return;
        }
        cout << "Priority Queue elements: ";
        for (int i = 0; i < size; i++) {
            cout << arr[i] << " ";
        }
        cout << endl;
    }

    ~PriorityQueue() {
        delete[] arr;
    }
};


//-------------------------------------------------------------------

#include <iostream>
using namespace std;

class Deque {
    int* arr;
    int front;
    int rear;
    int maxSize;

public:
    Deque(int capacity) : maxSize(capacity), front(-1), rear(-1) {
        arr = new int[maxSize];
    }

    void addFront(int value) {
        if ((front == 0 && rear == maxSize - 1) || (front == rear + 1)) {
            cout << "Deque is full." << endl;
            return;
        }
        if (front == -1) {
            front = rear = 0;
        } else if (front == 0) {
            front = maxSize - 1;
        } else {
            front--;
        }
        arr[front] = value;
        cout << "Added to front: " << value << endl;
    }

    void addRear(int value) {
        if ((front == 0 && rear == maxSize - 1) || (front == rear + 1)) {
            cout << "Deque is full." << endl;
            return;
        }
        if (rear == -1) {
            front = rear = 0;
        } else if (rear == maxSize - 1) {
            rear = 0;
        } else {
            rear++;
        }
        arr[rear] = value;
        cout << "Added to rear: " << value << endl;
    }

    void removeFront() {
        if (front == -1) {
            cout << "Deque is empty." << endl;
            return;
        }
        cout << "Removed from front: " << arr[front] << endl;
        if (front == rear) {
            front = rear = -1;
        } else if (front == maxSize - 1) {
            front = 0;
        } else {
            front++;
        }
    }

    void removeRear() {
        if (rear == -1) {
            cout << "Deque is empty." << endl;
            return;
        }
        cout << "Removed from rear: " << arr[rear] << endl;
        if (front == rear) {
            front = rear = -1;
        } else if (rear == 0) {
            rear = maxSize - 1;
        } else {
            rear--;
        }
    }

    void display() {
        if (front == -1) {
            cout << "Deque is empty." << endl;
            return;
        }
        cout << "Deque elements: ";
        int i = front;
        while (true) {
            cout << arr[i] << " ";
            if (i == rear) break;
            i = (i + 1) % maxSize;
        }
        cout << endl;
    }

    ~Deque() {
        delete[] arr;
    }
};

//--------------------------------------------------------------------------------

#include <iostream>
using namespace std;

class CircularQueue {
    int* arr;
    int front;
    int rear;
    int maxSize;

public:
    CircularQueue(int capacity) : maxSize(capacity), front(-1), rear(-1) {
        arr = new int[maxSize];
    }

    void enqueue(int value) {
        if ((rear + 1) % maxSize == front) {
            cout << "Circular Queue is full." << endl;
            return;
        }
        if (front == -1) {
            front = rear = 0;
        } else {
            rear = (rear + 1) % maxSize;
        }
        arr[rear] = value;
        cout << "Enqueued: " << value << endl;
    }

    void dequeue() {
        if (front == -1) {
            cout << "Circular Queue is empty." << endl;
            return;
        }
        cout << "Dequeued: " << arr[front] << endl;
        if (front == rear) {
            front = rear = -1;
        } else {
            front = (front + 1) % maxSize;
        }
    }

    void display() {
        if (front == -1) {
            cout << "Circular Queue is empty." << endl;
            return;
        }
        cout << "Circular Queue elements: ";
        int i = front;
        while (true) {
            cout << arr[i] << " ";
            if (i == rear) break;
            i = (i + 1) % maxSize;
        }
        cout << endl;
    }

    ~CircularQueue() {
        delete[] arr;
    }
};
