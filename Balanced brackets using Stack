#include <iostream>
#include <string>
using namespace std;

#define MAX 100

class Stack {
    int top;
    char arr[MAX];
    
public:
    Stack() {
        top = -1;  // Correct initialization
    }

    void push(char c) {
        if (top == MAX - 1) {
            cout << "Stack is full" << endl;
        } else {
            arr[++top] = c;
        }
    }

    char pop() {
        if (top == -1) {
            cout << "Stack is empty" << endl;
            return '\0';  // Return null character if stack is empty
        } else {
            return arr[top--];  // Return and decrement top
        }
    }

    bool isEmpty() {
        return top == -1;
    }
};

// Function to check for matching pairs
bool isMatchingPair(char open, char close) {
    return (open == '(' && close == ')') ||
           (open == '{' && close == '}') ||
           (open == '[' && close == ']');
}

// Function to check if brackets are balanced
bool isValid(string s) {
    Stack stack;

    for (int i = 0; i < s.length(); i++) {
        char ch = s[i];

        if (ch == '(' || ch == '{' || ch == '[') {
            stack.push(ch);  // Push opening brackets onto the stack
        } else if (ch == ')' || ch == '}' || ch == ']') {
            if (stack.isEmpty()) {
                return false;  // Extra closing bracket with no matching opening
            }

            char lastOpened = stack.pop(); // Get the last opened bracket

            if (!isMatchingPair(lastOpened, ch)) {
                return false;  // Brackets do not match, so not balanced
            }
        }
    }

    return stack.isEmpty();  // If stack is empty, brackets are balanced
}

int main() {
    string s;
    cout << "Enter the bracket string: ";
    cin >> s;

    if (isValid(s)) {
        cout << "Valid string" << endl;
    } else {
        cout << "Invalid string" << endl;
    }

    return 0;
}
